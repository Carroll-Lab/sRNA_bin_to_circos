#!/usr/bin/python
# encoding: utf-8
'''
sRNAbin_to_circos 



@author:     Stephen Fletcher

@copyright:  2016 organization_name. All rights reserved.

@license:    MIT

@contact:    s.fletcher@uq.edu.au
@deffield    updated: Updated
'''

import sys
import os
import tomato_circos as tc

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

__all__ = []
__version__ = 0.1
__date__ = '2016-03-22'
__updated__ = '2016-03-22'

DEBUG = 1
TESTRUN = 0
PROFILE = 0

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def main(argv=None): # IGNORE:C0111
    '''Command line options.'''

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (program_version, 
                                                     program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by Stephen Fletcher on %s.
  Copyright 2016 organization_name. All rights reserved.

  Licensed under the MIT license

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license, 
                                formatter_class=RawDescriptionHelpFormatter)

        parser.add_argument('-V', '--version', action='version', version=program_version_message)
        parser.add_argument('organism', 
                            type = str, help = "Org: tomato, arabidopsis, etc.")     
        parser.add_argument('input_file', 
                            type = str, help = "Analysis pairs in a text file")     
        parser.add_argument('bin_path', 
                            type = str, help = "Path to bin files")     

        parser.add_argument('output_dir', 
                            type = str, help = "Path to output directory")     

        # Process arguments
        args = parser.parse_args()
        print args.organism
        if args.organism == "tomato":
            print 'yes'
            tc.bulk_circos_plot(args.input_file, args.bin_path, 
                                args.output_dir)          


        return 0
    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception, e:
        if DEBUG or TESTRUN:
            raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
    main()